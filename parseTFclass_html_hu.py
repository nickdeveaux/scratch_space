#!/usr/bin/python

Usage = """
parseTFclass_html.py
Goal: Extract TF families from http://www.edgar-wingender.de/muTF_classification-1.html
	from the human TF classification.  In addition, take human gene symbols and translate
	to TF mouse gene symbols	
Usage: python ${scriptHome}/parseTFclass_html.py outDir
INPUTS:
	tfClassHtml -- a file generated by TFClass (Wingender et al. 2013. NARS)
		e.g., http://www.edgar-wingender.de/muTF_classification-1.html
		e.g., http://www.edgar-wingender.de/huTF_classification.html
	keyFileHu -- human e.g., kgXref.txt generated by Illumina iGenomes resources:
		http://support.illumina.com/sequencing/sequencing_software/igenome.html
	keyFileMu -- mouse e.g., kgXref.txt generated by Illumina iGenomes resources:
		http://support.illumina.com/sequencing/sequencing_software/igenome.html
	outName -- name for output file
OUTPUTS:
	outName.txt -- column 1 = family name, column 2 = gene symbols, seperated by 
		underscores
	outName.p -- a pickle containing a python dictionary, where keys = family member name,
		items = list of gene symbols	
	
"""	

import sys
import os
import re
import itertools
import cPickle as pickle
import numpy

sys.argv = ['/Users/ndeveaux/Dev/scratchspace',
	'/Users/ndeveaux/Data/tf_class/huTF_classification_161017.html',
	#'/Users/ndeveaux/Data/human_reference/hg38_kgXref.txt',
	'/Users/ndeveaux/Data/human_reference/hgall_kgXref.txt',
	'/Users/ndeveaux/Desktop/']


tfClassHtml=sys.argv[1]
keyFileHu=sys.argv[2]
outName=sys.argv[3]

huMuOut = outName + '_2mu'
gene2famOut = outName + '_gene2fam_v0'
outName = outName + '_fam2gene_v0'

# human
# first parse the keyFile to get a dictionary, where keys = uniProt IDs, 
#	items = gene symbols
upGeneDic = dict()
keyIn = open(keyFileHu,'r')
for line in keyIn:
	lineInf = list()
	lineInf = line.split('\t')
	upID = lineInf[2] # uniprot ID = 3rd column
	geneSym = lineInf[4] # gene symbol = 5th column
	upGeneDic[upID] = geneSym
keyIn.close()

# parse the .html file
geneFamDic = dict() # keys = Family, items = list of gene symbols in family
gene2FamDic = dict() # keys = gene symbols, item = family membership
# search strings
familyMarkStart = '<i>Family</i>: '
# familyMarkEnd = '</td>'
familyMarkEnd = '<[/!][\-t][\-d]'
uniProtStart = '<td class="uniprot"><a href="http://www.uniprot.org/uniprot/'
uniProtEnd = 'target="uniprot"'
uniProtMouseStart = '<td class="uniprot_mu"><a href="http://www.uniprot.org/uniprot/'
notFoundUpIDs = 0
found = 0
genesFound = list()
hu2muDic = dict()

htmlIn = open(tfClassHtml,'r')
for line in htmlIn:
	# test if line contains a family name
	if familyMarkStart in line:
		famOb = re.search(familyMarkStart + '.+' + familyMarkEnd, line)
		currFam = famOb.group(0).replace(familyMarkStart,'')
		currFam = re.sub(familyMarkEnd + '.*$','',currFam)		
		# start a dictionary entry for the current family
		geneFamDic[currFam] = list()		
	elif uniProtStart in line: # see whether we're at a uniprot ID	line
		upOb = re.search(uniProtStart + '.+' + uniProtEnd, line)
		currUpID = upOb.group(0).replace(uniProtStart,'').replace(uniProtEnd,'').replace('" ','')
		# convert Uniprot ID to gene symbol
		# use a "try - except" statement because not all uniprot IDs in the html are in 
		# the keyFile
		try:		
			currGene = upGeneDic[currUpID]		
			# add gene symbol to the dictionary
			geneFamDic[currFam].append(currGene)
			gene2FamDic[currGene] = currFam
			found += 1
			genesFound.append(currGene)
			hu2muDic[currGene] = list()
		except KeyError:
			print currUpID + " not found in " + keyFileHu
			notFoundUpIDs += 1
	elif uniProtMouseStart in line:	# see whether we're at a mouse uniprot ID line
		print 'mouse uniprot: skipping'
htmlIn.close()

import pdb; pdb.set_trace()

print str(notFoundUpIDs) + ' uniprot IDs were not found in ' + keyFileHu
print str(found) + ' uniprot IDs were found in ' + keyFileHu
print str(len(set(genesFound))) + ' gene symbols classified in families.'

# output the results as a text file
output = open(outName + '.txt','w')
sortedFamNames = sorted(geneFamDic.keys())
output.write('Family\tGene_Members\n')
for family in sortedFamNames:
	output.write(family + '\t' + ' '.join(list(set(geneFamDic[family]))) + '\n')
output.close()

# save the python dictionary in Python pickle format
pickle.dump(geneFamDic,open(outName + '.p','wb'))
pickle.dump(gene2FamDic,open(gene2famOut + '.p','wb'))

print outName + '.txt + .p generated.'
print gene2famOut + '.p generated.'

# also output human to mouse TF name mappings
output = open(huMuOut + '.txt','w')
sortedHuTfs = sorted(hu2muDic.keys())
output.write('HumanTF\tMouseTF\n')
for hugene in sortedHuTfs:
	output.write(hugene + '\t' + ' '.join(list(set(hu2muDic[hugene]))) + '\n')
output.close()

pickle.dump(hu2muDic,open(huMuOut + '.p','wb'))

print huMuOut + '.txt + .p generated.'
